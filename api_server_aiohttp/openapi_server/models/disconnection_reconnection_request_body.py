# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disconnection_reconnection_request_body_params import DisconnectionReconnectionRequestBodyParams
from openapi_server.models.service import Service
from openapi_server import util


class DisconnectionReconnectionRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service: Service=None, params: DisconnectionReconnectionRequestBodyParams=None):
        """DisconnectionReconnectionRequestBody - a model defined in OpenAPI

        :param service: The service of this DisconnectionReconnectionRequestBody.
        :param params: The params of this DisconnectionReconnectionRequestBody.
        """
        self.openapi_types = {
            'service': Service,
            'params': DisconnectionReconnectionRequestBodyParams
        }

        self.attribute_map = {
            'service': 'Service',
            'params': 'Params'
        }

        self._service = service
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisconnectionReconnectionRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Disconnection_Reconnection_request_body of this DisconnectionReconnectionRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this DisconnectionReconnectionRequestBody.


        :return: The service of this DisconnectionReconnectionRequestBody.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DisconnectionReconnectionRequestBody.


        :param service: The service of this DisconnectionReconnectionRequestBody.
        :type service: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def params(self):
        """Gets the params of this DisconnectionReconnectionRequestBody.


        :return: The params of this DisconnectionReconnectionRequestBody.
        :rtype: DisconnectionReconnectionRequestBodyParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this DisconnectionReconnectionRequestBody.


        :param params: The params of this DisconnectionReconnectionRequestBody.
        :type params: DisconnectionReconnectionRequestBodyParams
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params
