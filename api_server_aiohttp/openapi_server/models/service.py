# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_type: str=None, filial: str=None, area: List[str]=None):
        """Service - a model defined in OpenAPI

        :param service_type: The service_type of this Service.
        :param filial: The filial of this Service.
        :param area: The area of this Service.
        """
        self.openapi_types = {
            'service_type': str,
            'filial': str,
            'area': List[str]
        }

        self.attribute_map = {
            'service_type': 'ServiceType',
            'filial': 'Filial',
            'area': 'Area'
        }

        self._service_type = service_type
        self._filial = filial
        self._area = area

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_type(self):
        """Gets the service_type of this Service.

        Имя запрашиваемого сервиса Consumers, Disconnection_Reconnection_list, или EndDevices

        :return: The service_type of this Service.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this Service.

        Имя запрашиваемого сервиса Consumers, Disconnection_Reconnection_list, или EndDevices

        :param service_type: The service_type of this Service.
        :type service_type: str
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")

        self._service_type = service_type

    @property
    def filial(self):
        """Gets the filial of this Service.

        Идентификатор филиала из справочника КИС Баланс

        :return: The filial of this Service.
        :rtype: str
        """
        return self._filial

    @filial.setter
    def filial(self, filial):
        """Sets the filial of this Service.

        Идентификатор филиала из справочника КИС Баланс

        :param filial: The filial of this Service.
        :type filial: str
        """
        if filial is None:
            raise ValueError("Invalid value for `filial`, must not be `None`")

        self._filial = filial

    @property
    def area(self):
        """Gets the area of this Service.


        :return: The area of this Service.
        :rtype: List[str]
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Service.


        :param area: The area of this Service.
        :type area: List[str]
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")

        self._area = area
