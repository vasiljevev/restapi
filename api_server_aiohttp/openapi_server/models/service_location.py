# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geometry import Geometry
from openapi_server.models.service import Service
from openapi_server.models.service_location_address import ServiceLocationAddress
from openapi_server.models.service_location_cadatster import ServiceLocationCadatster
from openapi_server import util


class ServiceLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service: Service=None, consumer_id: str=None, service_location_id: str=None, address: ServiceLocationAddress=None, cadatster: ServiceLocationCadatster=None, geometry: Geometry=None):
        """ServiceLocation - a model defined in OpenAPI

        :param service: The service of this ServiceLocation.
        :param consumer_id: The consumer_id of this ServiceLocation.
        :param service_location_id: The service_location_id of this ServiceLocation.
        :param address: The address of this ServiceLocation.
        :param cadatster: The cadatster of this ServiceLocation.
        :param geometry: The geometry of this ServiceLocation.
        """
        self.openapi_types = {
            'service': Service,
            'consumer_id': str,
            'service_location_id': str,
            'address': ServiceLocationAddress,
            'cadatster': ServiceLocationCadatster,
            'geometry': Geometry
        }

        self.attribute_map = {
            'service': 'Service',
            'consumer_id': 'ConsumerId',
            'service_location_id': 'ServiceLocationId',
            'address': 'Address',
            'cadatster': 'Cadatster',
            'geometry': 'Geometry'
        }

        self._service = service
        self._consumer_id = consumer_id
        self._service_location_id = service_location_id
        self._address = address
        self._cadatster = cadatster
        self._geometry = geometry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceLocation of this ServiceLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this ServiceLocation.


        :return: The service of this ServiceLocation.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ServiceLocation.


        :param service: The service of this ServiceLocation.
        :type service: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def consumer_id(self):
        """Gets the consumer_id of this ServiceLocation.

        Идентификатор Потребителя КИС Баланс

        :return: The consumer_id of this ServiceLocation.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this ServiceLocation.

        Идентификатор Потребителя КИС Баланс

        :param consumer_id: The consumer_id of this ServiceLocation.
        :type consumer_id: str
        """
        if consumer_id is None:
            raise ValueError("Invalid value for `consumer_id`, must not be `None`")

        self._consumer_id = consumer_id

    @property
    def service_location_id(self):
        """Gets the service_location_id of this ServiceLocation.

        Идентификатор ЭПУ КИС Баланс

        :return: The service_location_id of this ServiceLocation.
        :rtype: str
        """
        return self._service_location_id

    @service_location_id.setter
    def service_location_id(self, service_location_id):
        """Sets the service_location_id of this ServiceLocation.

        Идентификатор ЭПУ КИС Баланс

        :param service_location_id: The service_location_id of this ServiceLocation.
        :type service_location_id: str
        """
        if service_location_id is None:
            raise ValueError("Invalid value for `service_location_id`, must not be `None`")

        self._service_location_id = service_location_id

    @property
    def address(self):
        """Gets the address of this ServiceLocation.


        :return: The address of this ServiceLocation.
        :rtype: ServiceLocationAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ServiceLocation.


        :param address: The address of this ServiceLocation.
        :type address: ServiceLocationAddress
        """

        self._address = address

    @property
    def cadatster(self):
        """Gets the cadatster of this ServiceLocation.


        :return: The cadatster of this ServiceLocation.
        :rtype: ServiceLocationCadatster
        """
        return self._cadatster

    @cadatster.setter
    def cadatster(self, cadatster):
        """Sets the cadatster of this ServiceLocation.


        :param cadatster: The cadatster of this ServiceLocation.
        :type cadatster: ServiceLocationCadatster
        """

        self._cadatster = cadatster

    @property
    def geometry(self):
        """Gets the geometry of this ServiceLocation.


        :return: The geometry of this ServiceLocation.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this ServiceLocation.


        :param geometry: The geometry of this ServiceLocation.
        :type geometry: Geometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")

        self._geometry = geometry
