# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service import Service
from openapi_server import util


class UsagePoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service: Service=None, usage_point_id: str=None, service_location_id: str=None, substation_code_tm: str=None, transformer_name: str=None, bay_code_tm: str=None, bay_name: str=None, line_code_tm: str=None, line_name: str=None, tower_code_tm: str=None, tower_name: str=None):
        """UsagePoint - a model defined in OpenAPI

        :param service: The service of this UsagePoint.
        :param usage_point_id: The usage_point_id of this UsagePoint.
        :param service_location_id: The service_location_id of this UsagePoint.
        :param substation_code_tm: The substation_code_tm of this UsagePoint.
        :param transformer_name: The transformer_name of this UsagePoint.
        :param bay_code_tm: The bay_code_tm of this UsagePoint.
        :param bay_name: The bay_name of this UsagePoint.
        :param line_code_tm: The line_code_tm of this UsagePoint.
        :param line_name: The line_name of this UsagePoint.
        :param tower_code_tm: The tower_code_tm of this UsagePoint.
        :param tower_name: The tower_name of this UsagePoint.
        """
        self.openapi_types = {
            'service': Service,
            'usage_point_id': str,
            'service_location_id': str,
            'substation_code_tm': str,
            'transformer_name': str,
            'bay_code_tm': str,
            'bay_name': str,
            'line_code_tm': str,
            'line_name': str,
            'tower_code_tm': str,
            'tower_name': str
        }

        self.attribute_map = {
            'service': 'Service',
            'usage_point_id': 'UsagePointID',
            'service_location_id': 'ServiceLocationID',
            'substation_code_tm': 'SubstationCodeTm',
            'transformer_name': 'TransformerName',
            'bay_code_tm': 'BayCodeTm',
            'bay_name': 'BayName',
            'line_code_tm': 'LineCodeTm',
            'line_name': 'LineName',
            'tower_code_tm': 'TowerCodeTm',
            'tower_name': 'TowerName'
        }

        self._service = service
        self._usage_point_id = usage_point_id
        self._service_location_id = service_location_id
        self._substation_code_tm = substation_code_tm
        self._transformer_name = transformer_name
        self._bay_code_tm = bay_code_tm
        self._bay_name = bay_name
        self._line_code_tm = line_code_tm
        self._line_name = line_name
        self._tower_code_tm = tower_code_tm
        self._tower_name = tower_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsagePoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsagePoint of this UsagePoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this UsagePoint.


        :return: The service of this UsagePoint.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this UsagePoint.


        :param service: The service of this UsagePoint.
        :type service: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def usage_point_id(self):
        """Gets the usage_point_id of this UsagePoint.

        Идентификатор Точки поставки в КИС Баланс

        :return: The usage_point_id of this UsagePoint.
        :rtype: str
        """
        return self._usage_point_id

    @usage_point_id.setter
    def usage_point_id(self, usage_point_id):
        """Sets the usage_point_id of this UsagePoint.

        Идентификатор Точки поставки в КИС Баланс

        :param usage_point_id: The usage_point_id of this UsagePoint.
        :type usage_point_id: str
        """
        if usage_point_id is None:
            raise ValueError("Invalid value for `usage_point_id`, must not be `None`")

        self._usage_point_id = usage_point_id

    @property
    def service_location_id(self):
        """Gets the service_location_id of this UsagePoint.

        Идентификатор ЭПУ КИС Баланс

        :return: The service_location_id of this UsagePoint.
        :rtype: str
        """
        return self._service_location_id

    @service_location_id.setter
    def service_location_id(self, service_location_id):
        """Sets the service_location_id of this UsagePoint.

        Идентификатор ЭПУ КИС Баланс

        :param service_location_id: The service_location_id of this UsagePoint.
        :type service_location_id: str
        """

        self._service_location_id = service_location_id

    @property
    def substation_code_tm(self):
        """Gets the substation_code_tm of this UsagePoint.

        Код ТМ СУПА питающей подстанции (ТП/РП)

        :return: The substation_code_tm of this UsagePoint.
        :rtype: str
        """
        return self._substation_code_tm

    @substation_code_tm.setter
    def substation_code_tm(self, substation_code_tm):
        """Sets the substation_code_tm of this UsagePoint.

        Код ТМ СУПА питающей подстанции (ТП/РП)

        :param substation_code_tm: The substation_code_tm of this UsagePoint.
        :type substation_code_tm: str
        """
        if substation_code_tm is None:
            raise ValueError("Invalid value for `substation_code_tm`, must not be `None`")

        self._substation_code_tm = substation_code_tm

    @property
    def transformer_name(self):
        """Gets the transformer_name of this UsagePoint.

        Наименование питающего трансформатора

        :return: The transformer_name of this UsagePoint.
        :rtype: str
        """
        return self._transformer_name

    @transformer_name.setter
    def transformer_name(self, transformer_name):
        """Sets the transformer_name of this UsagePoint.

        Наименование питающего трансформатора

        :param transformer_name: The transformer_name of this UsagePoint.
        :type transformer_name: str
        """

        self._transformer_name = transformer_name

    @property
    def bay_code_tm(self):
        """Gets the bay_code_tm of this UsagePoint.

        Код КМ СУПА ячейки присоединения питающего фидера

        :return: The bay_code_tm of this UsagePoint.
        :rtype: str
        """
        return self._bay_code_tm

    @bay_code_tm.setter
    def bay_code_tm(self, bay_code_tm):
        """Sets the bay_code_tm of this UsagePoint.

        Код КМ СУПА ячейки присоединения питающего фидера

        :param bay_code_tm: The bay_code_tm of this UsagePoint.
        :type bay_code_tm: str
        """

        self._bay_code_tm = bay_code_tm

    @property
    def bay_name(self):
        """Gets the bay_name of this UsagePoint.


        :return: The bay_name of this UsagePoint.
        :rtype: str
        """
        return self._bay_name

    @bay_name.setter
    def bay_name(self, bay_name):
        """Sets the bay_name of this UsagePoint.


        :param bay_name: The bay_name of this UsagePoint.
        :type bay_name: str
        """

        self._bay_name = bay_name

    @property
    def line_code_tm(self):
        """Gets the line_code_tm of this UsagePoint.


        :return: The line_code_tm of this UsagePoint.
        :rtype: str
        """
        return self._line_code_tm

    @line_code_tm.setter
    def line_code_tm(self, line_code_tm):
        """Sets the line_code_tm of this UsagePoint.


        :param line_code_tm: The line_code_tm of this UsagePoint.
        :type line_code_tm: str
        """

        self._line_code_tm = line_code_tm

    @property
    def line_name(self):
        """Gets the line_name of this UsagePoint.


        :return: The line_name of this UsagePoint.
        :rtype: str
        """
        return self._line_name

    @line_name.setter
    def line_name(self, line_name):
        """Sets the line_name of this UsagePoint.


        :param line_name: The line_name of this UsagePoint.
        :type line_name: str
        """

        self._line_name = line_name

    @property
    def tower_code_tm(self):
        """Gets the tower_code_tm of this UsagePoint.


        :return: The tower_code_tm of this UsagePoint.
        :rtype: str
        """
        return self._tower_code_tm

    @tower_code_tm.setter
    def tower_code_tm(self, tower_code_tm):
        """Sets the tower_code_tm of this UsagePoint.


        :param tower_code_tm: The tower_code_tm of this UsagePoint.
        :type tower_code_tm: str
        """

        self._tower_code_tm = tower_code_tm

    @property
    def tower_name(self):
        """Gets the tower_name of this UsagePoint.


        :return: The tower_name of this UsagePoint.
        :rtype: str
        """
        return self._tower_name

    @tower_name.setter
    def tower_name(self, tower_name):
        """Sets the tower_name of this UsagePoint.


        :param tower_name: The tower_name of this UsagePoint.
        :type tower_name: str
        """

        self._tower_name = tower_name
