# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumers_inner_usage_points_inner import ConsumersInnerUsagePointsInner
from openapi_server.models.geometry import Geometry
from openapi_server import util


class ConsumersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, consumer_id: str=None, consumer_name: str=None, consumer_type: str=None, contract: str=None, requets_number: str=None, service_location_id: str=None, name: str=None, organization_id: str=None, object_status: str=None, fias_id: str=None, address: str=None, region: str=None, district: str=None, city: str=None, street: str=None, house: str=None, room: str=None, remark: str=None, cadaster: str=None, max_power: str=None, reliability_category: str=None, phone: str=None, residents_count: str=None, service_disp_category: str=None, num_of_storeys: str=None, stand_by_capacity: str=None, significance: str=None, service_contingency_catagory: str=None, in_charge_full_name: str=None, emergency_power_reserve: str=None, techno_power_reserve: str=None, techno_power_reserve_duration: str=None, geometry: Geometry=None, usage_points: List[ConsumersInnerUsagePointsInner]=None):
        """ConsumersInner - a model defined in OpenAPI

        :param action_type: The action_type of this ConsumersInner.
        :param consumer_id: The consumer_id of this ConsumersInner.
        :param consumer_name: The consumer_name of this ConsumersInner.
        :param consumer_type: The consumer_type of this ConsumersInner.
        :param contract: The contract of this ConsumersInner.
        :param requets_number: The requets_number of this ConsumersInner.
        :param service_location_id: The service_location_id of this ConsumersInner.
        :param name: The name of this ConsumersInner.
        :param organization_id: The organization_id of this ConsumersInner.
        :param object_status: The object_status of this ConsumersInner.
        :param fias_id: The fias_id of this ConsumersInner.
        :param address: The address of this ConsumersInner.
        :param region: The region of this ConsumersInner.
        :param district: The district of this ConsumersInner.
        :param city: The city of this ConsumersInner.
        :param street: The street of this ConsumersInner.
        :param house: The house of this ConsumersInner.
        :param room: The room of this ConsumersInner.
        :param remark: The remark of this ConsumersInner.
        :param cadaster: The cadaster of this ConsumersInner.
        :param max_power: The max_power of this ConsumersInner.
        :param reliability_category: The reliability_category of this ConsumersInner.
        :param phone: The phone of this ConsumersInner.
        :param residents_count: The residents_count of this ConsumersInner.
        :param service_disp_category: The service_disp_category of this ConsumersInner.
        :param num_of_storeys: The num_of_storeys of this ConsumersInner.
        :param stand_by_capacity: The stand_by_capacity of this ConsumersInner.
        :param significance: The significance of this ConsumersInner.
        :param service_contingency_catagory: The service_contingency_catagory of this ConsumersInner.
        :param in_charge_full_name: The in_charge_full_name of this ConsumersInner.
        :param emergency_power_reserve: The emergency_power_reserve of this ConsumersInner.
        :param techno_power_reserve: The techno_power_reserve of this ConsumersInner.
        :param techno_power_reserve_duration: The techno_power_reserve_duration of this ConsumersInner.
        :param geometry: The geometry of this ConsumersInner.
        :param usage_points: The usage_points of this ConsumersInner.
        """
        self.openapi_types = {
            'action_type': str,
            'consumer_id': str,
            'consumer_name': str,
            'consumer_type': str,
            'contract': str,
            'requets_number': str,
            'service_location_id': str,
            'name': str,
            'organization_id': str,
            'object_status': str,
            'fias_id': str,
            'address': str,
            'region': str,
            'district': str,
            'city': str,
            'street': str,
            'house': str,
            'room': str,
            'remark': str,
            'cadaster': str,
            'max_power': str,
            'reliability_category': str,
            'phone': str,
            'residents_count': str,
            'service_disp_category': str,
            'num_of_storeys': str,
            'stand_by_capacity': str,
            'significance': str,
            'service_contingency_catagory': str,
            'in_charge_full_name': str,
            'emergency_power_reserve': str,
            'techno_power_reserve': str,
            'techno_power_reserve_duration': str,
            'geometry': Geometry,
            'usage_points': List[ConsumersInnerUsagePointsInner]
        }

        self.attribute_map = {
            'action_type': 'ActionType',
            'consumer_id': 'ConsumerId',
            'consumer_name': 'ConsumerName',
            'consumer_type': 'ConsumerType',
            'contract': 'Contract',
            'requets_number': 'RequetsNumber',
            'service_location_id': 'ServiceLocationId',
            'name': 'Name',
            'organization_id': 'OrganizationId',
            'object_status': 'ObjectStatus',
            'fias_id': 'FiasId',
            'address': 'Address',
            'region': 'Region',
            'district': 'District',
            'city': 'City',
            'street': 'Street',
            'house': 'House',
            'room': 'Room',
            'remark': 'Remark',
            'cadaster': 'Cadaster',
            'max_power': 'MaxPower',
            'reliability_category': 'ReliabilityCategory',
            'phone': 'Phone',
            'residents_count': 'ResidentsCount',
            'service_disp_category': 'ServiceDispCategory',
            'num_of_storeys': 'NumOfStoreys',
            'stand_by_capacity': 'StandByCapacity',
            'significance': 'Significance',
            'service_contingency_catagory': 'ServiceContingencyCatagory',
            'in_charge_full_name': 'InChargeFullName',
            'emergency_power_reserve': 'EmergencyPowerReserve',
            'techno_power_reserve': 'TechnoPowerReserve',
            'techno_power_reserve_duration': 'TechnoPowerReserveDuration',
            'geometry': 'Geometry',
            'usage_points': 'UsagePoints'
        }

        self._action_type = action_type
        self._consumer_id = consumer_id
        self._consumer_name = consumer_name
        self._consumer_type = consumer_type
        self._contract = contract
        self._requets_number = requets_number
        self._service_location_id = service_location_id
        self._name = name
        self._organization_id = organization_id
        self._object_status = object_status
        self._fias_id = fias_id
        self._address = address
        self._region = region
        self._district = district
        self._city = city
        self._street = street
        self._house = house
        self._room = room
        self._remark = remark
        self._cadaster = cadaster
        self._max_power = max_power
        self._reliability_category = reliability_category
        self._phone = phone
        self._residents_count = residents_count
        self._service_disp_category = service_disp_category
        self._num_of_storeys = num_of_storeys
        self._stand_by_capacity = stand_by_capacity
        self._significance = significance
        self._service_contingency_catagory = service_contingency_catagory
        self._in_charge_full_name = in_charge_full_name
        self._emergency_power_reserve = emergency_power_reserve
        self._techno_power_reserve = techno_power_reserve
        self._techno_power_reserve_duration = techno_power_reserve_duration
        self._geometry = geometry
        self._usage_points = usage_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consumers_inner of this ConsumersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this ConsumersInner.


        :return: The action_type of this ConsumersInner.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ConsumersInner.


        :param action_type: The action_type of this ConsumersInner.
        :type action_type: str
        """

        self._action_type = action_type

    @property
    def consumer_id(self):
        """Gets the consumer_id of this ConsumersInner.


        :return: The consumer_id of this ConsumersInner.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this ConsumersInner.


        :param consumer_id: The consumer_id of this ConsumersInner.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def consumer_name(self):
        """Gets the consumer_name of this ConsumersInner.


        :return: The consumer_name of this ConsumersInner.
        :rtype: str
        """
        return self._consumer_name

    @consumer_name.setter
    def consumer_name(self, consumer_name):
        """Sets the consumer_name of this ConsumersInner.


        :param consumer_name: The consumer_name of this ConsumersInner.
        :type consumer_name: str
        """

        self._consumer_name = consumer_name

    @property
    def consumer_type(self):
        """Gets the consumer_type of this ConsumersInner.


        :return: The consumer_type of this ConsumersInner.
        :rtype: str
        """
        return self._consumer_type

    @consumer_type.setter
    def consumer_type(self, consumer_type):
        """Sets the consumer_type of this ConsumersInner.


        :param consumer_type: The consumer_type of this ConsumersInner.
        :type consumer_type: str
        """

        self._consumer_type = consumer_type

    @property
    def contract(self):
        """Gets the contract of this ConsumersInner.


        :return: The contract of this ConsumersInner.
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this ConsumersInner.


        :param contract: The contract of this ConsumersInner.
        :type contract: str
        """

        self._contract = contract

    @property
    def requets_number(self):
        """Gets the requets_number of this ConsumersInner.


        :return: The requets_number of this ConsumersInner.
        :rtype: str
        """
        return self._requets_number

    @requets_number.setter
    def requets_number(self, requets_number):
        """Sets the requets_number of this ConsumersInner.


        :param requets_number: The requets_number of this ConsumersInner.
        :type requets_number: str
        """

        self._requets_number = requets_number

    @property
    def service_location_id(self):
        """Gets the service_location_id of this ConsumersInner.


        :return: The service_location_id of this ConsumersInner.
        :rtype: str
        """
        return self._service_location_id

    @service_location_id.setter
    def service_location_id(self, service_location_id):
        """Sets the service_location_id of this ConsumersInner.


        :param service_location_id: The service_location_id of this ConsumersInner.
        :type service_location_id: str
        """

        self._service_location_id = service_location_id

    @property
    def name(self):
        """Gets the name of this ConsumersInner.


        :return: The name of this ConsumersInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsumersInner.


        :param name: The name of this ConsumersInner.
        :type name: str
        """

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this ConsumersInner.


        :return: The organization_id of this ConsumersInner.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ConsumersInner.


        :param organization_id: The organization_id of this ConsumersInner.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def object_status(self):
        """Gets the object_status of this ConsumersInner.


        :return: The object_status of this ConsumersInner.
        :rtype: str
        """
        return self._object_status

    @object_status.setter
    def object_status(self, object_status):
        """Sets the object_status of this ConsumersInner.


        :param object_status: The object_status of this ConsumersInner.
        :type object_status: str
        """

        self._object_status = object_status

    @property
    def fias_id(self):
        """Gets the fias_id of this ConsumersInner.


        :return: The fias_id of this ConsumersInner.
        :rtype: str
        """
        return self._fias_id

    @fias_id.setter
    def fias_id(self, fias_id):
        """Sets the fias_id of this ConsumersInner.


        :param fias_id: The fias_id of this ConsumersInner.
        :type fias_id: str
        """

        self._fias_id = fias_id

    @property
    def address(self):
        """Gets the address of this ConsumersInner.


        :return: The address of this ConsumersInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConsumersInner.


        :param address: The address of this ConsumersInner.
        :type address: str
        """

        self._address = address

    @property
    def region(self):
        """Gets the region of this ConsumersInner.


        :return: The region of this ConsumersInner.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ConsumersInner.


        :param region: The region of this ConsumersInner.
        :type region: str
        """

        self._region = region

    @property
    def district(self):
        """Gets the district of this ConsumersInner.


        :return: The district of this ConsumersInner.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this ConsumersInner.


        :param district: The district of this ConsumersInner.
        :type district: str
        """

        self._district = district

    @property
    def city(self):
        """Gets the city of this ConsumersInner.


        :return: The city of this ConsumersInner.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ConsumersInner.


        :param city: The city of this ConsumersInner.
        :type city: str
        """

        self._city = city

    @property
    def street(self):
        """Gets the street of this ConsumersInner.


        :return: The street of this ConsumersInner.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ConsumersInner.


        :param street: The street of this ConsumersInner.
        :type street: str
        """

        self._street = street

    @property
    def house(self):
        """Gets the house of this ConsumersInner.


        :return: The house of this ConsumersInner.
        :rtype: str
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this ConsumersInner.


        :param house: The house of this ConsumersInner.
        :type house: str
        """

        self._house = house

    @property
    def room(self):
        """Gets the room of this ConsumersInner.


        :return: The room of this ConsumersInner.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this ConsumersInner.


        :param room: The room of this ConsumersInner.
        :type room: str
        """

        self._room = room

    @property
    def remark(self):
        """Gets the remark of this ConsumersInner.


        :return: The remark of this ConsumersInner.
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this ConsumersInner.


        :param remark: The remark of this ConsumersInner.
        :type remark: str
        """

        self._remark = remark

    @property
    def cadaster(self):
        """Gets the cadaster of this ConsumersInner.


        :return: The cadaster of this ConsumersInner.
        :rtype: str
        """
        return self._cadaster

    @cadaster.setter
    def cadaster(self, cadaster):
        """Sets the cadaster of this ConsumersInner.


        :param cadaster: The cadaster of this ConsumersInner.
        :type cadaster: str
        """

        self._cadaster = cadaster

    @property
    def max_power(self):
        """Gets the max_power of this ConsumersInner.


        :return: The max_power of this ConsumersInner.
        :rtype: str
        """
        return self._max_power

    @max_power.setter
    def max_power(self, max_power):
        """Sets the max_power of this ConsumersInner.


        :param max_power: The max_power of this ConsumersInner.
        :type max_power: str
        """

        self._max_power = max_power

    @property
    def reliability_category(self):
        """Gets the reliability_category of this ConsumersInner.


        :return: The reliability_category of this ConsumersInner.
        :rtype: str
        """
        return self._reliability_category

    @reliability_category.setter
    def reliability_category(self, reliability_category):
        """Sets the reliability_category of this ConsumersInner.


        :param reliability_category: The reliability_category of this ConsumersInner.
        :type reliability_category: str
        """

        self._reliability_category = reliability_category

    @property
    def phone(self):
        """Gets the phone of this ConsumersInner.


        :return: The phone of this ConsumersInner.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ConsumersInner.


        :param phone: The phone of this ConsumersInner.
        :type phone: str
        """

        self._phone = phone

    @property
    def residents_count(self):
        """Gets the residents_count of this ConsumersInner.


        :return: The residents_count of this ConsumersInner.
        :rtype: str
        """
        return self._residents_count

    @residents_count.setter
    def residents_count(self, residents_count):
        """Sets the residents_count of this ConsumersInner.


        :param residents_count: The residents_count of this ConsumersInner.
        :type residents_count: str
        """

        self._residents_count = residents_count

    @property
    def service_disp_category(self):
        """Gets the service_disp_category of this ConsumersInner.


        :return: The service_disp_category of this ConsumersInner.
        :rtype: str
        """
        return self._service_disp_category

    @service_disp_category.setter
    def service_disp_category(self, service_disp_category):
        """Sets the service_disp_category of this ConsumersInner.


        :param service_disp_category: The service_disp_category of this ConsumersInner.
        :type service_disp_category: str
        """

        self._service_disp_category = service_disp_category

    @property
    def num_of_storeys(self):
        """Gets the num_of_storeys of this ConsumersInner.


        :return: The num_of_storeys of this ConsumersInner.
        :rtype: str
        """
        return self._num_of_storeys

    @num_of_storeys.setter
    def num_of_storeys(self, num_of_storeys):
        """Sets the num_of_storeys of this ConsumersInner.


        :param num_of_storeys: The num_of_storeys of this ConsumersInner.
        :type num_of_storeys: str
        """

        self._num_of_storeys = num_of_storeys

    @property
    def stand_by_capacity(self):
        """Gets the stand_by_capacity of this ConsumersInner.


        :return: The stand_by_capacity of this ConsumersInner.
        :rtype: str
        """
        return self._stand_by_capacity

    @stand_by_capacity.setter
    def stand_by_capacity(self, stand_by_capacity):
        """Sets the stand_by_capacity of this ConsumersInner.


        :param stand_by_capacity: The stand_by_capacity of this ConsumersInner.
        :type stand_by_capacity: str
        """

        self._stand_by_capacity = stand_by_capacity

    @property
    def significance(self):
        """Gets the significance of this ConsumersInner.


        :return: The significance of this ConsumersInner.
        :rtype: str
        """
        return self._significance

    @significance.setter
    def significance(self, significance):
        """Sets the significance of this ConsumersInner.


        :param significance: The significance of this ConsumersInner.
        :type significance: str
        """

        self._significance = significance

    @property
    def service_contingency_catagory(self):
        """Gets the service_contingency_catagory of this ConsumersInner.


        :return: The service_contingency_catagory of this ConsumersInner.
        :rtype: str
        """
        return self._service_contingency_catagory

    @service_contingency_catagory.setter
    def service_contingency_catagory(self, service_contingency_catagory):
        """Sets the service_contingency_catagory of this ConsumersInner.


        :param service_contingency_catagory: The service_contingency_catagory of this ConsumersInner.
        :type service_contingency_catagory: str
        """

        self._service_contingency_catagory = service_contingency_catagory

    @property
    def in_charge_full_name(self):
        """Gets the in_charge_full_name of this ConsumersInner.


        :return: The in_charge_full_name of this ConsumersInner.
        :rtype: str
        """
        return self._in_charge_full_name

    @in_charge_full_name.setter
    def in_charge_full_name(self, in_charge_full_name):
        """Sets the in_charge_full_name of this ConsumersInner.


        :param in_charge_full_name: The in_charge_full_name of this ConsumersInner.
        :type in_charge_full_name: str
        """

        self._in_charge_full_name = in_charge_full_name

    @property
    def emergency_power_reserve(self):
        """Gets the emergency_power_reserve of this ConsumersInner.


        :return: The emergency_power_reserve of this ConsumersInner.
        :rtype: str
        """
        return self._emergency_power_reserve

    @emergency_power_reserve.setter
    def emergency_power_reserve(self, emergency_power_reserve):
        """Sets the emergency_power_reserve of this ConsumersInner.


        :param emergency_power_reserve: The emergency_power_reserve of this ConsumersInner.
        :type emergency_power_reserve: str
        """

        self._emergency_power_reserve = emergency_power_reserve

    @property
    def techno_power_reserve(self):
        """Gets the techno_power_reserve of this ConsumersInner.


        :return: The techno_power_reserve of this ConsumersInner.
        :rtype: str
        """
        return self._techno_power_reserve

    @techno_power_reserve.setter
    def techno_power_reserve(self, techno_power_reserve):
        """Sets the techno_power_reserve of this ConsumersInner.


        :param techno_power_reserve: The techno_power_reserve of this ConsumersInner.
        :type techno_power_reserve: str
        """

        self._techno_power_reserve = techno_power_reserve

    @property
    def techno_power_reserve_duration(self):
        """Gets the techno_power_reserve_duration of this ConsumersInner.


        :return: The techno_power_reserve_duration of this ConsumersInner.
        :rtype: str
        """
        return self._techno_power_reserve_duration

    @techno_power_reserve_duration.setter
    def techno_power_reserve_duration(self, techno_power_reserve_duration):
        """Sets the techno_power_reserve_duration of this ConsumersInner.


        :param techno_power_reserve_duration: The techno_power_reserve_duration of this ConsumersInner.
        :type techno_power_reserve_duration: str
        """

        self._techno_power_reserve_duration = techno_power_reserve_duration

    @property
    def geometry(self):
        """Gets the geometry of this ConsumersInner.


        :return: The geometry of this ConsumersInner.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this ConsumersInner.


        :param geometry: The geometry of this ConsumersInner.
        :type geometry: Geometry
        """

        self._geometry = geometry

    @property
    def usage_points(self):
        """Gets the usage_points of this ConsumersInner.


        :return: The usage_points of this ConsumersInner.
        :rtype: List[ConsumersInnerUsagePointsInner]
        """
        return self._usage_points

    @usage_points.setter
    def usage_points(self, usage_points):
        """Sets the usage_points of this ConsumersInner.


        :param usage_points: The usage_points of this ConsumersInner.
        :type usage_points: List[ConsumersInnerUsagePointsInner]
        """

        self._usage_points = usage_points
