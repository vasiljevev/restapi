// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  rpc SayHelloStreamReply (HelloRequest) returns (stream HelloReply) {}

  // Sends another greeting
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

// Calculator

message Number {
    float value = 1;
}

message Number2 {
    float value1 = 1;
    float value2 = 2;
}

message CalcResult {
    float valueIn1 = 1;
    float valueIn2 = 2;
    float Result=3;
}

service Calculator {
    rpc SquareRoot(Number) returns (Number) {}
    rpc Pow(Number2) returns (CalcResult) {}
    rpc Sum(Number2) returns (CalcResult) {}
    rpc Difference(Number2) returns (CalcResult) {}
    rpc Product(Number2) returns (CalcResult) {}
    rpc Quotient (Number2) returns (CalcResult) {}

}

service Fibonacci {
    rpc AtIndex(NumberInt) returns (NumberInt);
    rpc GetSequence(NumberInt) returns (stream NumberInt);
    rpc SumIndicies(stream NumberInt) returns (NumberInt);
    rpc StreamSequence(stream NumberInt) returns (stream NumberInt);
}


message NumberInt {
    int32 value = 1;
}

message SqlReq {
    string quare = 1;
}

message SqlResp {
    string resp = 1;
}


service SqlQuare {
    rpc Select(SqlReq) returns (SqlResp) {}
}