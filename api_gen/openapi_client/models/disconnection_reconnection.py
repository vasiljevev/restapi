# coding: utf-8

"""
    Omnuis-API astu specificatioin

    Интеграционный сервис АИС КИС Баланс

    The version of the OpenAPI document: 2.0
    Contact: e-vasilyev@it-serv.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.disconnection_reconnection_disconnection_list_inner import DisconnectionReconnectionDisconnectionListInner
from openapi_client.models.disconnection_reconnection_reconnection_list_inner import DisconnectionReconnectionReconnectionListInner

class DisconnectionReconnection(BaseModel):
    """
    4.1 Сервис по запросу ПТК АСТУ возвращает из КИС Баланс данные о введенных ограничениях / возобновлении подачи ээ по указанным районам, созданные / измененные / удаленные за период Date_begin и Date_end  # noqa: E501
    """
    disconnection_list: Optional[conlist(DisconnectionReconnectionDisconnectionListInner)] = Field(None, alias="DisconnectionList", description="Массив данных по отключениям")
    reconnection_list: Optional[conlist(DisconnectionReconnectionReconnectionListInner)] = Field(None, alias="ReconnectionList", description="Массив данных по возобновлению")
    __properties = ["DisconnectionList", "ReconnectionList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DisconnectionReconnection:
        """Create an instance of DisconnectionReconnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in disconnection_list (list)
        _items = []
        if self.disconnection_list:
            for _item in self.disconnection_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DisconnectionList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reconnection_list (list)
        _items = []
        if self.reconnection_list:
            for _item in self.reconnection_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ReconnectionList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DisconnectionReconnection:
        """Create an instance of DisconnectionReconnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DisconnectionReconnection.parse_obj(obj)

        _obj = DisconnectionReconnection.parse_obj({
            "disconnection_list": [DisconnectionReconnectionDisconnectionListInner.from_dict(_item) for _item in obj.get("DisconnectionList")] if obj.get("DisconnectionList") is not None else None,
            "reconnection_list": [DisconnectionReconnectionReconnectionListInner.from_dict(_item) for _item in obj.get("ReconnectionList")] if obj.get("ReconnectionList") is not None else None
        })
        return _obj


