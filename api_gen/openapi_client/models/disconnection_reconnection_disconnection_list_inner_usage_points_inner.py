# coding: utf-8

"""
    Omnuis-API astu specificatioin

    Интеграционный сервис АИС КИС Баланс

    The version of the OpenAPI document: 2.0
    Contact: e-vasilyev@it-serv.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.geometry import Geometry

class DisconnectionReconnectionDisconnectionListInnerUsagePointsInner(BaseModel):
    """
    DisconnectionReconnectionDisconnectionListInnerUsagePointsInner
    """
    action_type: Optional[StrictStr] = Field(None, alias="ActionType")
    name: Optional[StrictStr] = Field(None, alias="Name")
    organization_id: Optional[StrictStr] = Field(None, alias="OrganizationID")
    is_sdp: Optional[StrictStr] = Field(None, alias="IsSDP")
    voltage_level: Optional[StrictStr] = Field(None, alias="VoltageLevel")
    voltage_class: Optional[StrictStr] = Field(None, alias="VoltageClass")
    service_location_id: Optional[StrictStr] = Field(None, alias="ServiceLocationID")
    substation_code_tm: Optional[StrictStr] = Field(None, alias="SubstationCodeTm")
    substation_name: Optional[StrictStr] = Field(None, alias="SubstationName")
    transformer_name: Optional[StrictStr] = Field(None, alias="TransformerName")
    bay_code_tm: Optional[StrictStr] = Field(None, alias="BayCodeTm")
    bay_name: Optional[StrictStr] = Field(None, alias="BayName")
    line_code_tm: Optional[StrictStr] = Field(None, alias="LineCodeTm")
    line_name: Optional[StrictStr] = Field(None, alias="LineName")
    tower_code_tm: Optional[StrictStr] = Field(None, alias="TowerCodeTm")
    tower_name: Optional[StrictStr] = Field(None, alias="TowerName")
    remark: Optional[StrictStr] = Field(None, alias="Remark")
    geometry: Optional[Geometry] = None
    __properties = ["ActionType", "Name", "OrganizationID", "IsSDP", "VoltageLevel", "VoltageClass", "ServiceLocationID", "SubstationCodeTm", "SubstationName", "TransformerName", "BayCodeTm", "BayName", "LineCodeTm", "LineName", "TowerCodeTm", "TowerName", "Remark", "geometry"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DisconnectionReconnectionDisconnectionListInnerUsagePointsInner:
        """Create an instance of DisconnectionReconnectionDisconnectionListInnerUsagePointsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DisconnectionReconnectionDisconnectionListInnerUsagePointsInner:
        """Create an instance of DisconnectionReconnectionDisconnectionListInnerUsagePointsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DisconnectionReconnectionDisconnectionListInnerUsagePointsInner.parse_obj(obj)

        _obj = DisconnectionReconnectionDisconnectionListInnerUsagePointsInner.parse_obj({
            "action_type": obj.get("ActionType"),
            "name": obj.get("Name"),
            "organization_id": obj.get("OrganizationID"),
            "is_sdp": obj.get("IsSDP"),
            "voltage_level": obj.get("VoltageLevel"),
            "voltage_class": obj.get("VoltageClass"),
            "service_location_id": obj.get("ServiceLocationID"),
            "substation_code_tm": obj.get("SubstationCodeTm"),
            "substation_name": obj.get("SubstationName"),
            "transformer_name": obj.get("TransformerName"),
            "bay_code_tm": obj.get("BayCodeTm"),
            "bay_name": obj.get("BayName"),
            "line_code_tm": obj.get("LineCodeTm"),
            "line_name": obj.get("LineName"),
            "tower_code_tm": obj.get("TowerCodeTm"),
            "tower_name": obj.get("TowerName"),
            "remark": obj.get("Remark"),
            "geometry": Geometry.from_dict(obj.get("geometry")) if obj.get("geometry") is not None else None
        })
        return _obj


