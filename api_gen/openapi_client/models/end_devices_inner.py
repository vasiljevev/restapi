# coding: utf-8

"""
    Omnuis-API astu specificatioin

    Интеграционный сервис АИС КИС Баланс

    The version of the OpenAPI document: 2.0
    Contact: e-vasilyev@it-serv.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.end_devices_inner_measure_points_inner import EndDevicesInnerMeasurePointsInner
from openapi_client.models.geometry import Geometry

class EndDevicesInner(BaseModel):
    """
    EndDevicesInner
    """
    action_type: Optional[StrictStr] = Field(None, alias="ActionType")
    end_device_id: Optional[StrictStr] = Field(None, alias="EndDeviceId")
    name: Optional[StrictStr] = Field(None, alias="Name")
    organization_id: Optional[StrictStr] = Field(None, alias="OrganizationID")
    device_type: Optional[StrictStr] = Field(None, alias="DeviceType")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    is_amr: Optional[StrictStr] = Field(None, alias="isAMR")
    is_commercial: Optional[StrictStr] = Field(None, alias="IsCommercial")
    device_status: Optional[StrictStr] = Field(None, alias="DeviceStatus")
    belonging_type: Optional[StrictStr] = Field(None, alias="BelongingType")
    usage_point_id: Optional[StrictStr] = Field(None, alias="UsagePointID")
    substation_code_tm: Optional[StrictStr] = Field(None, alias="SubstationCodeTM")
    bay_code_tm: Optional[StrictStr] = Field(None, alias="BayCodeTM")
    line_code_tm: Optional[StrictStr] = Field(None, alias="LineCodeTM")
    tower_code_tm: Optional[StrictStr] = Field(None, alias="TowerCodeTM")
    device_location: Optional[StrictStr] = Field(None, alias="DeviceLocation")
    geometry: Optional[Geometry] = None
    measure_points: Optional[conlist(EndDevicesInnerMeasurePointsInner)] = Field(None, alias="MeasurePoints")
    __properties = ["ActionType", "EndDeviceId", "Name", "OrganizationID", "DeviceType", "SerialNumber", "isAMR", "IsCommercial", "DeviceStatus", "BelongingType", "UsagePointID", "SubstationCodeTM", "BayCodeTM", "LineCodeTM", "TowerCodeTM", "DeviceLocation", "geometry", "MeasurePoints"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EndDevicesInner:
        """Create an instance of EndDevicesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in measure_points (list)
        _items = []
        if self.measure_points:
            for _item in self.measure_points:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MeasurePoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EndDevicesInner:
        """Create an instance of EndDevicesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EndDevicesInner.parse_obj(obj)

        _obj = EndDevicesInner.parse_obj({
            "action_type": obj.get("ActionType"),
            "end_device_id": obj.get("EndDeviceId"),
            "name": obj.get("Name"),
            "organization_id": obj.get("OrganizationID"),
            "device_type": obj.get("DeviceType"),
            "serial_number": obj.get("SerialNumber"),
            "is_amr": obj.get("isAMR"),
            "is_commercial": obj.get("IsCommercial"),
            "device_status": obj.get("DeviceStatus"),
            "belonging_type": obj.get("BelongingType"),
            "usage_point_id": obj.get("UsagePointID"),
            "substation_code_tm": obj.get("SubstationCodeTM"),
            "bay_code_tm": obj.get("BayCodeTM"),
            "line_code_tm": obj.get("LineCodeTM"),
            "tower_code_tm": obj.get("TowerCodeTM"),
            "device_location": obj.get("DeviceLocation"),
            "geometry": Geometry.from_dict(obj.get("geometry")) if obj.get("geometry") is not None else None,
            "measure_points": [EndDevicesInnerMeasurePointsInner.from_dict(_item) for _item in obj.get("MeasurePoints")] if obj.get("MeasurePoints") is not None else None
        })
        return _obj


