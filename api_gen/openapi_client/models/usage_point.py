# coding: utf-8

"""
    Omnuis-API astu specificatioin

    Интеграционный сервис АИС КИС Баланс

    The version of the OpenAPI document: 2.0
    Contact: e-vasilyev@it-serv.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.service import Service

class UsagePoint(BaseModel):
    """
    3.2 Сервис используется для передачи в КИС Баланс из ПТК АСТУ данных по скорректированной привязке потребителя к объекту электросети  # noqa: E501
    """
    service: Service = Field(..., alias="Service")
    usage_point_id: StrictStr = Field(..., alias="UsagePointID", description="Идентификатор Точки поставки в КИС Баланс")
    service_location_id: Optional[StrictStr] = Field(None, alias="ServiceLocationID", description="Идентификатор ЭПУ КИС Баланс")
    substation_code_tm: StrictStr = Field(..., alias="SubstationCodeTm", description="Код ТМ СУПА питающей подстанции (ТП/РП)")
    transformer_name: Optional[StrictStr] = Field(None, alias="TransformerName", description="Наименование питающего трансформатора")
    bay_code_tm: Optional[StrictStr] = Field(None, alias="BayCodeTm", description="Код КМ СУПА ячейки присоединения питающего фидера")
    bay_name: Optional[StrictStr] = Field(None, alias="BayName")
    line_code_tm: Optional[StrictStr] = Field(None, alias="LineCodeTm")
    line_name: Optional[StrictStr] = Field(None, alias="LineName")
    tower_code_tm: Optional[StrictStr] = Field(None, alias="TowerCodeTm")
    tower_name: Optional[StrictStr] = Field(None, alias="TowerName")
    __properties = ["Service", "UsagePointID", "ServiceLocationID", "SubstationCodeTm", "TransformerName", "BayCodeTm", "BayName", "LineCodeTm", "LineName", "TowerCodeTm", "TowerName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UsagePoint:
        """Create an instance of UsagePoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['Service'] = self.service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UsagePoint:
        """Create an instance of UsagePoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UsagePoint.parse_obj(obj)

        _obj = UsagePoint.parse_obj({
            "service": Service.from_dict(obj.get("Service")) if obj.get("Service") is not None else None,
            "usage_point_id": obj.get("UsagePointID"),
            "service_location_id": obj.get("ServiceLocationID"),
            "substation_code_tm": obj.get("SubstationCodeTm"),
            "transformer_name": obj.get("TransformerName"),
            "bay_code_tm": obj.get("BayCodeTm"),
            "bay_name": obj.get("BayName"),
            "line_code_tm": obj.get("LineCodeTm"),
            "line_name": obj.get("LineName"),
            "tower_code_tm": obj.get("TowerCodeTm"),
            "tower_name": obj.get("TowerName")
        })
        return _obj


