# coding: utf-8

"""
    Omnuis-API astu specificatioin

    Интеграционный сервис АИС КИС Баланс

    The version of the OpenAPI document: 2.0
    Contact: e-vasilyev@it-serv.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.geometry import Geometry
from openapi_client.models.service import Service
from openapi_client.models.service_location_address import ServiceLocationAddress
from openapi_client.models.service_location_cadatster import ServiceLocationCadatster

class ServiceLocation(BaseModel):
    """
    3.1 используется для передачи в КИС Баланс из ПТК АСТУ данных по скорректированному местоположению ЭПУ потребителя  # noqa: E501
    """
    service: Service = Field(..., alias="Service")
    consumer_id: StrictStr = Field(..., alias="ConsumerId", description="Идентификатор Потребителя КИС Баланс")
    service_location_id: StrictStr = Field(..., alias="ServiceLocationId", description="Идентификатор ЭПУ КИС Баланс")
    address: Optional[ServiceLocationAddress] = Field(None, alias="Address")
    cadatster: Optional[ServiceLocationCadatster] = Field(None, alias="Cadatster")
    geometry: Geometry = Field(..., alias="Geometry")
    __properties = ["Service", "ConsumerId", "ServiceLocationId", "Address", "Cadatster", "Geometry"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceLocation:
        """Create an instance of ServiceLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['Service'] = self.service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cadatster
        if self.cadatster:
            _dict['Cadatster'] = self.cadatster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['Geometry'] = self.geometry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceLocation:
        """Create an instance of ServiceLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceLocation.parse_obj(obj)

        _obj = ServiceLocation.parse_obj({
            "service": Service.from_dict(obj.get("Service")) if obj.get("Service") is not None else None,
            "consumer_id": obj.get("ConsumerId"),
            "service_location_id": obj.get("ServiceLocationId"),
            "address": ServiceLocationAddress.from_dict(obj.get("Address")) if obj.get("Address") is not None else None,
            "cadatster": ServiceLocationCadatster.from_dict(obj.get("Cadatster")) if obj.get("Cadatster") is not None else None,
            "geometry": Geometry.from_dict(obj.get("Geometry")) if obj.get("Geometry") is not None else None
        })
        return _obj


